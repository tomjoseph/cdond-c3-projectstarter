version: 2.1

parameters:
  workflow-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID:0:7}"
#    default: "42ca443"

orbs: 
  slack: circleci/slack@4.5.0
  aws-cli: circleci/aws-cli@2.0.6

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        type: string
        default: "<< pipeline.parameters.workflow-id >>"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
             echo "Destroying environment: << parameters.workflow-id >> "
             aws cloudformation delete-stack --stack-name "Backend-Tom-<< parameters.workflow-id >>"
             aws s3 rm "s3://udapeople-<< parameters.workflow-id >>" --recursive
             aws cloudformation delete-stack --stack-name "Frontend-Tom-<< parameters.workflow-id >>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$( curl -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request GET https://api.memstash.io/values/migration_<< pipeline.parameters.workflow-id >> )
            if (( $SUCCESS==1 )); 
            then
              echo "Reverting migrations: << pipeline.parameters.workflow-id >> "
              cd ~/project/backend
              npm install
              npm run migration:revert
            else 
              echo "No migrations to revert: << pipeline.parameters.workflow-id >> "
            fi

  notify-on-failure:
    description: Notify on failure
    steps:
      - slack/notify:
          channel: circleci-tom
          event: fail
          template: basic_fail_1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test backend-end
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          channel: circleci-tom
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          channel: circleci-tom
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags "Project=Project03-BE-Tom-<< pipeline.parameters.workflow-id >>" \
              --stack-name "Backend-Tom-<< pipeline.parameters.workflow-id >>" \
              --parameter-overrides ID="<< pipeline.parameters.workflow-id >>"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags "Project=Project03-FE-Tom-<< pipeline.parameters.workflow-id >>" \
              --stack-name "Frontend-Tom-<< pipeline.parameters.workflow-id >>" \
              --parameter-overrides ID="<< pipeline.parameters.workflow-id >>"  
      # Rollback on failure      
      - destroy-environment
#      - notify-on-failure

  save-workspace-inventory:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Project,Values=Project03-BE-Tom-<< pipeline.parameters.workflow-id >>" \
              --output text >> .circleci/ansible/inventory.txt
            echo "Backend IPs:"
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Rollback on failure      
      - destroy-environment
#      - notify-on-failure

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["4b:34:8a:72:f8:b0:bf:9d:c7:fc:6a:0a:27:8a:c1:92"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Install aws-cli
          command: |
            #pip3 install awscliv2 --upgrade
            pip install awscli
      - run:
          name: Configure server
          command: |
            echo "EC2 Inventory"
            echo ".circleci/ansible/inventory.txt" 
            cat .circleci/ansible/inventory.txt
            # Run ansible
            echo "Running ansible configure-server.yml"
            cd .circleci/ansible
            pwd
            ansible-playbook -i inventory.txt configure-server.yml
      # Rollback on failure
      - destroy-environment
#      - notify-on-failure

  run-migrations:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
      - run:
          name: Install dependencies
          command: |
            pip install awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            echo "~/project/backend/migrations_dump.txt"
            cat ~/project/backend/migrations_dump.txt  
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_<< pipeline.parameters.workflow-id >>
            else 
              echo "No Migrations"
            fi
      # Rollback on failure      
      - revert-migrations
      - destroy-environment
#      - notify-on-failure

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
      - run:
          name: Install dependencies
          command: |
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$( aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Project,Values=Project03-BE-Tom-<< pipeline.parameters.workflow-id >>" \
              --output text )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"<< pipeline.parameters.workflow-id >>".tar.gz dist
            aws s3 cp dist s3://udapeople-<< pipeline.parameters.workflow-id >> --recursive
      # Rollback on failure      
      - revert-migrations
      - destroy-environment
#      - notify-on-failure

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["4b:34:8a:72:f8:b0:bf:9d:c7:fc:6a:0a:27:8a:c1:92"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm ansible
      - run:
          name: Build backend artifact
          command: |
            cd ~/project/backend
            npm install
            npm run build
            # Zip the directory
            cd ../
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files
            mv -f artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/files/.
            echo "Files in: ~/project/.circleci/ansible/roles/deploy/files/"
            cd ~/project/.circleci/ansible/roles/deploy/files/
            pwd
            ls -l ~/project/.circleci/ansible/roles/deploy/files/
            echo "Files in: ~/project/.circleci/ansible/"
            cd ~/project/.circleci/ansible/
            pwd
            ls -l ~/project/.circleci/ansible/
      - run:
          name: Deploy backend
          command: |
            echo "EC2 Inventory"
            echo ".circleci/ansible/inventory.txt" 
            cat .circleci/ansible/inventory.txt
            echo "Files in: .circleci/ansible/"
            ls -l .circleci/ansible/
            # Run ansible
            echo "Running ansible configure-server.yml"
            cd .circleci/ansible
            pwd
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Rollback on failure      
      - revert-migrations
      - destroy-environment
#      - notify-on-failure

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
      - run:
          name: Install dependencies
          command: |
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            # Fetch and prepare the BACKEND_IP env var
            export BACKEND_IP=$( aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Project,Values=Project03-BE-Tom-<< pipeline.parameters.workflow-id >>" \
              --output text )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-<< pipeline.parameters.workflow-id >>.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure  
      - revert-migrations
      - destroy-environment
#      - notify-on-failure

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$( aws cloudformation \
                      list-exports --query "Exports[?Name=='WorkflowID'].Value" \
                      --no-paginate --output text )
            echo OldWorkflowID: "${OldWorkflowID}"
            echo ${OldWorkflowID} > ~/project/oldworkflowid.txt
            cat ~/project/oldworkflowid.txt
            echo "Updating Initial Stack!"
            aws cloudformation deploy \
                    --template-file .circleci/files/cloudfront.yml \
                    --stack-name InitialStack \
                    --parameter-overrides WorkflowID="<< pipeline.parameters.workflow-id >>" \
                    --tags project=udapeople
      - persist_to_workspace:
          root: ~/
          paths:
            - project/oldworkflowid.txt
      # Here's where you will add some code to rollback on failure  
      - revert-migrations
      - destroy-environment
#      - notify-on-failure

  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Install tar utility
            command: |
              yum install -y tar gzip
        - attach_workspace:
            at: ~/
        - run:
            name: Show all stacks
            command: |
              # Fetch the stack names          
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              echo Stack names: "${STACKS[@]}"    
        - run:
            name: Remove old stacks and files
            command: |
              # Fetch the Old workflow ID
              export OldWorkflowID=$( cat  ~/project/oldworkflowid.txt )
              echo OldWorkflowID: "${OldWorkflowID}"
              export CurrentWorkflowID="<< pipeline.parameters.workflow-id >>"
              echo CurrentWorkflowID: "${CurrentWorkflowID}"
              if [[ "${CurrentWorkflowID}" != "${OldWorkflowID}" ]]
              then
                  echo "Delete Workflow ${OldWorkflowID}"
                  echo "Destroying old environment resources..."
                  aws cloudformation delete-stack --stack-name "Backend-Tom-${OldWorkflowID}"
                  aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                  aws cloudformation delete-stack --stack-name "Frontend-Tom-${OldWorkflowID}"
              else
                  echo "Nothing to Delete!"
              fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [ master ]
      - save-workspace-inventory:
          requires: [deploy-infrastructure]
      - configure-infrastructure:
          requires: [save-workspace-inventory]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
